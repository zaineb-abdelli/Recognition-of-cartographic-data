# -*- coding: utf-8 -*-
"""Data Augmentation-Tuteur√©

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Avn0P7jyX9P4W6Xy3bskb9wy1bHgwIGs
"""

from google.colab import drive
drive.mount('/drive')

import matplotlib.pyplot as plt
import os
from PIL import Image
# import albumentations package
import albumentations as A
import numpy as np
import skimage
import cv2
from keras.preprocessing.image import load_img

import zipfile
zip_ref = zipfile.ZipFile("/drive/My Drive/data.zip", 'r')
zip_ref.extractall("/drive/My Drive/data3")

# Helper function to display the images in a grid
# Source: https://stackoverflow.com/questions/42040747/more-idiomatic-way-to-display-images-in-a-grid-with-numpy
def gallery(array, ncols=3):
    '''
    Function to arange images into a grid.
    INPUT:
        array - numpy array containing images
        ncols - number of columns in resulting imahe grid
    OUTPUT:
        result - reshaped array into a grid with given number of columns
    '''
    nindex, height, width, intensity = array.shape
    nrows = nindex//ncols
    assert nindex == nrows*ncols
    result = (array.reshape(nrows, ncols, height, width, intensity)
              .swapaxes(1,2)
              .reshape(height*nrows, width*ncols, intensity))
    return result

! pip install albumentations

!pip install augmentor

def augment_data(image):
  # initialize augmentations
  gaus_noise = A.GaussNoise() # gaussian noise
  elastic = A.ElasticTransform() # elastic transform
  bright_contrast = A.RandomBrightnessContrast(p=1) # random brightness and contrast
  gamma = A.RandomGamma(p=1) # random gamma
  clahe = A.CLAHE(p=1) # CLAHE (see https://en.wikipedia.org/wiki/Adaptive_histogram_equalization#Contrast_Limited_AHE)
  blur = A.Blur()

  # apply augmentations
  # pass image to the augmentation
  img_gaus = gaus_noise(image = image)
  img_elastic = elastic(image = image)
  img_bc = bright_contrast(image = image)
  img_gamma = gamma(image = image)
  img_clahe = clahe(image = image)
  img_blur = blur(image = image)

  # access the augmented image by 'image' key
  img_list = [img_gaus['image'], img_elastic['image'], img_bc['image'], img_gamma['image'], img_clahe['image'], img_blur['image']]
  return(img_list)

path="/drive/My Drive/data3/"
for label in os.listdir(path):
  print(label)
  path_img=os.listdir(path+label)
  liste=[]
  for images in path_img:
    try:
      img_data=load_img(path+label+'/'+images) # load the image and resize it
      img_data = np.asarray(img_data)  # Convertir en tableau numpy
      listed_img=augment_data(img_data)
      liste=liste+listed_img
      # visualize the augmented images
    
      plt.figure(figsize=(10,10))
      plt.axis('off')
      plt.imshow(gallery(np.array(listed_img), ncols = 3))
      plt.title('Augmentation examples')
    
    except:
      print("could not load file",images)

  for i in range(len(liste)):
    try:
      cv2.imwrite(path+label+'/'+str(i)+path_img[i//6], cv2.cvtColor(liste[i], cv2.COLOR_RGB2BGR))
    except:
      print("could not save file ", path_img[i//6])