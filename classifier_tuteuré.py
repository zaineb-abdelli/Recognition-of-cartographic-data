# -*- coding: utf-8 -*-
"""classifier-tuteuré

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D5aIFHPM0Z0Ktis-9qrvwiMVrD5lF6cB
"""

from google.colab import drive
drive.mount('/drive')

import keras
from keras.models import Sequential
from keras.layers import Dense, Activation, Dropout, Flatten
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.preprocessing.image import load_img, img_to_array
from keras.applications.vgg16 import preprocess_input
from keras.optimizers import Adam
from keras.callbacks import LearningRateScheduler, EarlyStopping, TerminateOnNaN,History



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from matplotlib import image
from os import listdir
import math


from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, label_ranking_average_precision_score, label_ranking_loss, coverage_error

"""#loading Images"""

#labels=[magasin,pharmacy,station_fuel,mosque]
path="/drive/My Drive/data3/"
def load_data():
  y=list()
  listed_img=list()

  for label in listdir(path):
    path_img=path+label
    for images in listdir(path_img):
      try:

        img_data=load_img(path_img+'/'+images, target_size=(100, 100)) # load the image and resize it
        img_data = img_to_array(img_data)  # Convertir en tableau numpy
        img_data= preprocess_input(img_data)  # Prétraiter l'image comme le veut VGG-16
        listed_img.append(img_data)
        y.append(label)
      except:
        print("error in loading image")
  return(listed_img,y)

imgs,labels=load_data()
y=np.asarray(labels).reshape(-1,1)
imgs=np.asarray(imgs)/255

"""# Nouvelle section"""

imgs.shape

#Split data
X_train, X_test, y_train, y_test=train_test_split(imgs,y,random_state=0, test_size=0.1)

ohe = OneHotEncoder()
y_train = ohe.fit_transform(y_train.reshape(-1,1)) # contient des binaire / 
y_test = ohe.transform(y_test.reshape(-1,1))

y_train.shape

"""#MODEL"""

#Hyperparameters
epochs=70
n_obs=X_test.shape[0]
batch_size=100
img_width, img_height = 100, 100
batch_size = 32
samples_per_epoch = 1000
validation_steps = 300
nb_filters1 = 32
nb_filters2 = 64
conv1_size = 3
conv2_size = 2
pool_size = 2
classes_num = 12

model = Sequential()
model.add(Conv2D(nb_filters1, conv1_size, conv1_size, border_mode ="same", input_shape=(img_width, img_height, 3)))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(pool_size, pool_size)))

model.add(Conv2D(nb_filters2, conv2_size, conv2_size, border_mode ="same"))
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(pool_size, pool_size), dim_ordering='th'))

model.add(Flatten())
model.add(Dense(256))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(classes_num, activation='softmax'))
model.summary()

# Compile the model
model.compile(loss=keras.losses.categorical_crossentropy, optimizer='adam', metrics=['accuracy'])


def exp_decay(epoch): #One Epoch is when an ENTIRE dataset is passed forward and backward through the neural network only ONCE.
    initial_lrate = 0.001
    k = 0.75
    t = n_obs//(10000 * batch_size)  # every epoch we do n_obs/batch_size iteration
    lrate = initial_lrate * math.exp(-k*t) #we reduce the learning rate by a constant factor every few epochs.
    return lrate

lrate=LearningRateScheduler(exp_decay)

adam = Adam(lr = 0.001, beta_1 = 0.9, beta_2 = 0.999)


#early stopping
earlyStopping = EarlyStopping(patience = 10, verbose=1)

#terminating on NaN loss values
nanStopping = TerminateOnNaN()

#saving callback history
savingHistory = History()

#callbacks
callbacks_list = [earlyStopping,lrate, nanStopping, savingHistory]
history = model.fit(X_train, y_train, 
                    epochs=epochs, 
                    batch_size=batch_size, 
                    verbose=2, 
                    validation_data=(X_test, y_test),
                    shuffle=True,
                    callbacks=callbacks_list)                    

y_pred = model.predict(X_test, batch_size=batch_size)

print(classification_report(y_test.argmax(axis=1), y_pred.argmax(axis=1)))

# Network Performances Display
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
 
epochs = range(len(acc))
 
plt.plot(epochs, acc, 'b', label='Training acc')
plt.plot(epochs, val_acc, 'r', label='Validation acc')
plt.title('Training and validation accuracy')
plt.legend()
 
plt.figure()
 
plt.plot(epochs, loss, 'b', label='Training loss')
plt.plot(epochs, val_loss, 'r', label='Validation loss')
plt.title('Training and validation loss')
plt.legend()
 
plt.show()

from sklearn.metrics import confusion_matrix 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import classification_report 
 
results = confusion_matrix(y_test, y_pred) 
print(results)

from sklearn.metrics import multilabel_confusion_matrix
multilabel_confusion_matrix(y_test, y_pred)

